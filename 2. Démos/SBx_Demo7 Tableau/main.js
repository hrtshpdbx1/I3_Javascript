//DÃ©clarer un tableau

let hobbies = ['PÃ©tanque','Ricard','Poulet-Compote'];



console.log(hobbies)

//* Si je veux afficher la valeur de la 2Ã¨me case, elle porte la valeur 1
console.log(hobbies[1]); //"Ricard"
console.log(hobbies[6]);// undefined puisqu'il n'y a pas de valeur Ã  l'index 6

//! Acceder Ã  la taille du tableau
console.log('Taille du tableau:'+hobbies.length); 
//*Affiche le bombre d'Ã©lÃ©ment dans notre tableau // Ici 3 

//! Ajouter un nouvel Ã©lÃ©ment au tableau
//? version ðŸ’© 
// on ajouter a l'index 3 qui n'a pas encore de valeur
hobbies[3] = 'Zumba';
console.log(hobbies)

//? version appropriÃ©e 
// On va plutÃ´t utiliser une mÃ©thode qui permet d'ajouter un Ã©lment Ã  la fin d'un tableau existant

hobbies.push('Nail art');

hobbies.unshift('Philologie')

let techno = ['HTML','CSS','JS'];
techno.push('C+');
// techno.unshift('Python');
console.log(techno);

//! Supprime un Ã©lÃ©ment au tableau

//* Pop, supprime toujours le dernier Ã©lÃ©ments
techno.pop();
// console.log(techno);

//* techno.splice(1) / (indexDeDepart, nbElementASupp)
//* nbElementASupp est optionnel mais si vous ne le mettez pas, supprime tout jusqu'Ã  la fin  
// techno.splice(1) // Supprime Ã  partir de l'Ã©lement 1 jusqu'Ã  la fin
// techno.splice(1,1) // Supprime juste l'Ã©lement 1 

// console.log(techno);

//! Quelques mÃ©thodes utiles

//* Convertir en chaÃ®ne de caractÃ¨res
//* .toString()
//* Renvoie une chaÃ®ne de caractÃ¨res reprÃ©sentant le tableau spÃ©cifiÃ© et ses Ã©lÃ©ments.

const DIV_AFF_2 = document.getElementById('demo')
//* DIV_AFF_2.textContent = techno; 
//* tableau.toString() --> transforme un tableau en chaine de caractÃ¨re en concatÃ©tant tous les Ã©lements du tableau et en les sÃ©parant par une virgule/

DIV_AFF_2.textContent = techno.toString;

//* join([sÃ©parateur])
// Renvoie une chaÃ®ne de caractÃ¨res en concatÃ©nant tous les Ã©lÃ©ments d'un tableau sÃ©parÃ©s par le sÃ©parateur (par dÃ©faut : Â«,Â»)

//* Join permet de faire comme toString() mais en choissisant le sÃ©parateur
// si on laisse vide --> , comme le comme toString() 
// si je mets une valeur
// * DIV_AFF_2.textContent = techno.join(' - ')


//* Inverser lâ€™ordre des Ã©lÃ©ments
//* reverse()
console.clear();

const motsRigolos = ['Marches molles', 'Andouillette','Machin Bidule','CucurbitacÃ©es','Ornithorynque']
motsRigolos.reverse(); //* inverse l'ordre

console.log(motsRigolos);

//* Trier un tableau
//* sort([methodeComparaison])
//? Permet de trier les Ã©lÃ©ments dâ€™un tableau sur base dâ€™une mÃ©thode qui doit retourner un nombre positif, nÃ©gatif ou zÃ©ro.
// le tri ne se fait pas sur les nombre mais sur le poids des caractÃ¨res ascii (askip) 
// donc pas besoin de fonction de comparaison 

//* Par ordre croissant

const notes = [8,23,42,15];
notes.sort(function(a,b){return a-b;});
console.log(notes)

//* Par ordre dÃ©croissant
notes.sort(function(a,b){return b-a;});
console.log(notes)

//* Pour un tableau de chaine
 const beatles = ['John','Ringo','Paul','George'];
 beatles.sort((a,b) => a.localeCompare(b)) 

 //* compare une string a la suivante selon les lettres
 console.log(beatles)
