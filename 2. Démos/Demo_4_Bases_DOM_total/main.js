//! Bases de l'int√©raction avec le DOM
//! Document Object Model -> Repr√©sente les donn√©es contenues dans votre page Web
// C'est un gigantesque objet dans lequel on trouvera toutes les informations relatives √† la page
// * window est un objet qui repr√©sente toute votre fen√™tre de navigateur et qui peut √™tre utile pour r√©cup√©rer des informations comme :
// - sur quel navigateur est l'utilisateur
// - les extensions install√©es par l'utilisateur
// - la localisation 
// - la langue de son navigateur
// - sa pr√©f√©rence de th√®me
// - l'url actuelle
// - ...

// * document est un objet qui repr√©sente toute la page html
// ? (c'est lui qui nous int√©resse pour le moment)
// Comme votre page, ne poss√®de qu'un seul title (le texte dans l'onglet), on peut directement le modifier depuis l'objet document
document.title = 'Base Manip Dom';
// le body √©tant aussi unique, je peux y acc√©der directement depuis document
//document.body

// ! Si par contre on veut r√©cup√©rer un/des √©l√©ment/s pr√©cis dans la page, ce n'est pas garanti qu'il n'y en ai qu'un seul ni qu'il existe
// Dans ces cas l√†, on va devoir utiliser des m√©thodes (fonction) pour pouvoir r√©cup√©rer des √©l√©ments html pr√©sents dans la page
// ? Il existe plusieurs m√©thodes pour r√©cup√©rer un √©l√©ment HTML
// ! Celui qu'on va le plus utiliser ces prochains jours : Via l'id de l'√©l√©ment html qu'on veut r√©cup√©rer
// la m√©thode document.getElementById('nomId') r√©cup√®re l'√©l√©ment html qui correspond √† l'id
// on devra alors le stocker dans une variable pour l'utiliser ensuite
// Cette m√©thode, si je mets un id qui n'existe pas dans la page, va me renvoyer la valeur null puisqu'elle n'aura pas trouv√© d'√©l√©ment HTML
const DIV_EX1_RATE = document.getElementById('example-1');
console.log(DIV_EX1_RATE); //contient null puisqu'on a fait une faute dans le nom de l'id

const DIV_EX1 = document.getElementById('exemple-1');
console.log(DIV_EX1); //contient un objet qui repr√©sente la balise html

// ! Il existe cependant d'autres fa√ßons de r√©cup√©rer mais qui r√©cup√®re des listes d'√©l√©ments (tableaux)
// Pour r√©cup√©rer via la classe
const TOUS_LES_ELEMENTS_BLEUS = document.querySelectorAll('.blue');
// Pour r√©cup√©rer via le nom de la balise
const TOUS_LES_LIENS = document.querySelectorAll('a');
// dans la nav qui poss√®de la classe main je veux r√©cup√©rer uniquement les li qui sont impairs (don't panic on reverra les selecteurs css et ce sera rare de les utiliser comme √ßa)
const BLOUB = document.querySelectorAll('nav.main li:nth-of-type(odd)');

//! Consulter/Modifier le contenu (textuel) d'un √©l√©ment HTML
// * ‚ö†Ô∏è on ne pourra le faire que sur les balises par paires
// innerText ou textContent
console.log(DIV_EX1.innerText);
console.log(DIV_EX1.textContent);

DIV_EX1.innerText = 'Premi√®re modification du texte';
DIV_EX1.textContent = 'Deuxi√®me modification du texte';

// innerHTML
console.log(DIV_EX1.innerHTML);
DIV_EX1.innerHTML = 'Troisi√®me modification du texte';

// Quelle diff√©rence entre innerText/texteContent et innerHTML
DIV_EX1.textContent = '<p> 4√®me modif </p>'; //ne fera pas le rendu de votre paragraphe (ne fait pas de rendu HTML)
DIV_EX1.innerHTML = '<p> 5√®me modif </p>'; //fera le rendu HTML
// ! Attention, innerHTML peut amener √† de l'injection de code
// admettons, je fais une requ√™te pour avoir le nom de mon utilisateur
let userName = '<a href="https//virus.com">Aude</a>';
// Je veux lui dire bonjour dans mon site
DIV_EX1.innerHTML = `Bienvenue ${userName} !`;
// quand nos donn√©es viennent de l'ex√©tieur, on fait attention √† ce qu'on fait et on √©vite le innerHTML

// Attention dans l'autre sens :
// let commentaire = 'Top bien votre restau, j \'adore !'; //on re√ßoit un commentaire qui provient de notre API/base de donn√©es
let commentaire = 'Hinhinhin üßå <img src="https://i.pinimg.com/200x150/8a/cc/93/8acc9364ff61a6a92a54addae6ea1119.jpg" width="200px" alt="le restau √©tait d√©gueulasse !" />'; 
// DIV_EX1.innerHTML = commentaire;

//! Ajouter un √©v√®nement
const DIV_PLANTE = document.getElementById('plante');
const BTN_ARROSER = document.getElementById('arroser');

// Pour ajouter une gestion d'√©v√®nement sur notre √©lement HTML, on va lui ajouter un EventListener, un √©couteur d'√©v√®nement
// cette m√©thode addEventListener demande 2 infos
// le type d'event (string)
// le code √† ex√©cuter (fonction) (ici, une fonction anonyme)
// () => {} fonction anonyme
BTN_ARROSER.addEventListener('click', () => {
    // dans les {} on rajoute tout le code qu'on veut ex√©cuter lors du click
    // ici, au click, un arbre apparaitra √† la place de la pousse dans la div qui porte l'id plante
    DIV_PLANTE.textContent = 'üå≤';
});

//! Modifier les classes
const DIV_JOUR = document.getElementById('jour');
const BTN_INVERSER = document.getElementById('inverser');

BTN_INVERSER.addEventListener('click', () => {
    // classList vous donne la liste des class de l'√©l√©ment
    // Nous avons acc√®s ensuite √† 4 m√©thodes
    // classList.add('nomClass') -> ajoute la classe
    // classList.remove('nomClass') -> retire la classe
    // classList.contains('nomClass') -> renvoie un bool√©en pour savoir si la classe est pr√©sente ou non
    // classList.toggle('nonClass') -> supprime la classe si pr√©sente sinon, l'ajoute
    DIV_JOUR.classList.toggle('jour');
    DIV_JOUR.classList.toggle('nuit');

    //On ne peut pas encore changer le texte, il faut une condition en fait üòî

});

// ! Modifier le style d'une balise (√† n'utiliser qu'en cas de besoin)
const BTN_COMBIEN = document.getElementById('combien');
const DIV_JAUGE = document.getElementById('jauge');

BTN_COMBIEN.addEventListener('click', () => {
   let note = prompt('Tu te mets combien en Javascript sur 100 ?');
   
   //on modifie la taille de la div jauge pour qu'elle soit √©gale √† la note de l'utilisateur
   DIV_JAUGE.style.width = note + '%';
});

//! Modifier les attributs html
const P_VOUS = document.getElementById('vous');
const IMG_VOUS = document.getElementById('vous-img');
const BTN_FINIR = document.getElementById('finir');

BTN_FINIR.addEventListener('click', () => {
    P_VOUS.textContent = 'Vous √† la fin de journ√©e :';

    // Pour modifier l'attribut html d'un √©l√©ment, juste √† l'appeler avec le .
    IMG_VOUS.src = 'https://en.meming.world/images/en/d/d0/Crying_Cat.jpg';
    IMG_VOUS.alt = 'plus happy cat';

});

//! Consulter/Modifier la valeur d'un champs
const INPUT_TECHNO = document.getElementById('techno');
const BTN_VALIDER = document.getElementById('valider');
const P_RESULTAT = document.getElementById('resultat');

BTN_VALIDER.addEventListener('click', () => {
    //r√©cup√©rer la valeur actuellement dans l'input
    //Pour r√©cup√©rer la valeur qui se trouve dans un input, on utilise son attribut value
    // Cependant UNE exception checkbox, o√π on recup√®rera le bool√©en vrai ou faux gr√¢ce √† checked
    // ! value vous donnera toujours ce qui est dans l'input mais sous forme de chaine
    // Il existe du coup, pour les input type number, valueAsNumber qui convertit automatiquement la valeur en nombre 
    let techno = INPUT_TECHNO.value;

    //afficher la valeur dans le paragraphe
    P_RESULTAT.textContent = `Oh tu aimes ${techno} ?!?! Moi aussi hihihi`;

    INPUT_TECHNO.value = ''; //'' chaine vide
});





