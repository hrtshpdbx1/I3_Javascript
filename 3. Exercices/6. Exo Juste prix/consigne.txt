‚úÖ 1/ r√©cup√©rer √©l√©ments HTML 
btn_easy
btn_mild
btn_hardcore

input_user
btn_go
p_consigne
p_resultat
p_tentative

2/ EventListener --> clic btn_easy : 
nb_a_trouver = entre 1 et 10
nb_tentative = 10

G√©n√©rer un un nombre al√©atoire selon la difficult√© : const nombreATrouver = Math.floor(Math.random() * 10 + 1);

R√©initialise le nombre de tentatives
Attribuer une valeur √† nb_tentative = ok

Affiche dans "consigne" la chaine de caract√®re "Proposez un chiffre entre 1 et 10 ou bien je meurs"
Affiche les tentatives sous forme d'√©mojis avec padEnd()


3/ EventListener clic BTN_GO : 
r√©cuper input_user
V√©rifier que c'est un nombre valide
Comparer avec nombreATrouver

d√©clarer game over (tentatives = 0)
Si input_user < nombreATrouver et que nb_tentative > 0, affiche dans p_resultat "c'est plus que (input_user)"

Si input_user > nombreATrouver et que nb_tentative > 0,, affiche dans p_resultat "c'est moins que (input_user)"

Si input_user = nombreATrouver et que nb_tentative > 0,, affiche dans p_resultat "Gagn√© c'√©tait bien input_user"

Si nb_tentative = 0, affiche dans p_resultat "Perdu "
Si input_user = Nan ou <1 ou >10, affiche dans p_resultat "Veuillez entrer un nombre valide"


-----------

// ! Si vous souhaitez faire les √©mojis pour les tentatives
let tentatives = 5;
// padEnd rajoute le caract√®re donn√© en deuxi√®me param√®tre √† la fin de la chaine sur laquelle on utilis√© padEnd autant de fois que n√©cessaire pour atteindre la taille pr√©cis√©e en premier param√®tre

console.log( "--".padEnd(tentatives, '*')  );
console.log( "".padEnd(tentatives, 'üí≤')  ); /* Un √©moji prend la place de 2 caract√®res */
console.log( "".padEnd(tentatives * 2 , 'üí≤')  );

console.log( "--".padStart(tentatives, '*') );
console.log( "------".padStart(tentatives, '*'));



easy (1-10, 10 tentatives)
moyen (1-100, 10 tentatives)
hardcore (1-1000, 15 tentatives)

